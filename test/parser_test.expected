

### Simple, single command:
Parser.expression "test"
{ "count": 1, "cmd": "test", "args": [] }

### Single command, with count:
Parser.expression "2test"
{ "count": 2, "cmd": "test", "args": [] }

### Single command, with single positional parameter:
Parser.expression "test foo"
{ "count": 1, "cmd": "test", "args": [ [ "Positional", "foo" ] ] }

### Single command, with single positional URL:
Parser.expression "test google.com/search"
{
  "count": 1,
  "cmd": "test",
  "args": [ [ "Positional", "google.com/search" ] ]
}

### Single command, count, and single positional parameter:
Parser.expression "2test foo"
{ "count": 2, "cmd": "test", "args": [ [ "Positional", "foo" ] ] }

### Single command, with multiple positional parameters:
Parser.expression "test foo bar"
{
  "count": 1,
  "cmd": "test",
  "args": [ [ "Positional", "foo" ], [ "Positional", "bar" ] ]
}

### Single command, count, and multiple positional parameters:
Parser.expression "2test foo bar"
{
  "count": 2,
  "cmd": "test",
  "args": [ [ "Positional", "foo" ], [ "Positional", "bar" ] ]
}

### Single command, with single boolean flag:
Parser.expression "test --foo"
{
  "count": 1,
  "cmd": "test",
  "args": [ [ "Flag", { "name": "foo", "payload": [ "Absent" ] } ] ]
}

### Single command, with multiple boolean flags:
Parser.expression "test --foo --bar"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "foo", "payload": [ "Absent" ] } ],
    [ "Flag", { "name": "bar", "payload": [ "Absent" ] } ]
  ]
}

### Single command, with single boolean short-flag:
Parser.expression "test -f"
{
  "count": 1,
  "cmd": "test",
  "args": [ [ "Flag", { "name": "f", "payload": [ "Absent" ] } ] ]
}

### Single command, with multiple, concatenated boolean short-flags:
Parser.expression "test -foo"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "f", "payload": [ "Absent" ] } ],
    [ "Flag", { "name": "o", "payload": [ "Absent" ] } ],
    [ "Flag", { "name": "o", "payload": [ "Absent" ] } ]
  ]
}

### Single command, with multiple, separated boolean short-flags:
Parser.expression "test -f -o -o"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "f", "payload": [ "Absent" ] } ],
    [ "Flag", { "name": "o", "payload": [ "Absent" ] } ],
    [ "Flag", { "name": "o", "payload": [ "Absent" ] } ]
  ]
}

### Single command, with single possibly-parameterized flag:
Parser.expression "test --foo bar"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "foo", "payload": [ "Unresolved" ] } ],
    [ "Positional", "bar" ]
  ]
}

### Single command, with single possibly-parameterized short-flag:
Parser.expression "test -f bar"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "f", "payload": [ "Unresolved" ] } ],
    [ "Positional", "bar" ]
  ]
}

### Single command, single possibly-parameterized short-flag, and a URL:
Parser.expression "test -f google.com/search"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "f", "payload": [ "Unresolved" ] } ],
    [ "Positional", "google.com/search" ]
  ]
}

### Single command with single possibly-parameterized flag followed by a positional parameter:
Parser.expression "test --foo bar baz"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "foo", "payload": [ "Unresolved" ] } ],
    [ "Positional", "bar" ],
    [ "Positional", "baz" ]
  ]
}

### Single command with two possibly-parameterized flags:
Parser.expression "test --foo bar --baz widget"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "foo", "payload": [ "Unresolved" ] } ],
    [ "Positional", "bar" ],
    [ "Flag", { "name": "baz", "payload": [ "Unresolved" ] } ],
    [ "Positional", "widget" ]
  ]
}

### Single command, with single explicitly-parameterized flag:
Parser.expression "test --foo=bar"
{
  "count": 1,
  "cmd": "test",
  "args": [ [ "Flag", { "name": "foo", "payload": [ "Resolved", "bar" ] } ] ]
}

### Single command with single explicitly-parameterized flag followed by a positional parameter:
Parser.expression "test --foo=bar baz"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "foo", "payload": [ "Resolved", "bar" ] } ],
    [ "Positional", "baz" ]
  ]
}

### Single command, single explicitly-parameterized flag with a URL payload, followed by a positional parameter:
Parser.expression "test --foo=google.com/search baz"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [
      "Flag",
      { "name": "foo", "payload": [ "Resolved", "google.com/search" ] }
    ],
    [ "Positional", "baz" ]
  ]
}

### Single command with a bare-double-dash:
Parser.expression "test --"
{ "count": 1, "cmd": "test", "args": [ [ "Positional", "--" ] ] }

### Single command with a bare-double-dash followed by a long-flag:
Parser.expression "test -- --foo"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Positional", "--" ],
    [ "Flag", { "name": "foo", "payload": [ "Absent" ] } ]
  ]
}

### Single command with a bare-double-dash followed by another, normal positional:
Parser.expression "test -- foo"
{
  "count": 1,
  "cmd": "test",
  "args": [ [ "Positional", "--" ], [ "Positional", "foo" ] ]
}

### Single command with mixed flags and parameters:
Parser.expression "test --foo bar --baz=widget qux -qu ux"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "foo", "payload": [ "Unresolved" ] } ],
    [ "Positional", "bar" ],
    [ "Flag", { "name": "baz", "payload": [ "Resolved", "widget" ] } ],
    [ "Positional", "qux" ],
    [ "Flag", { "name": "q", "payload": [ "Absent" ] } ],
    [ "Flag", { "name": "u", "payload": [ "Unresolved" ] } ],
    [ "Positional", "ux" ]
  ]
}

### Single dquoted command:
Parser.expression "\"test\""
{ "count": 1, "cmd": "test", "args": [] }

### Single dquoted command with bare positional:
Parser.expression "\"test\" foo"
{ "count": 1, "cmd": "test", "args": [ [ "Positional", "foo" ] ] }

### Single dquoted command with bare flag:
Parser.expression "\"test\" --foo"
{
  "count": 1,
  "cmd": "test",
  "args": [ [ "Flag", { "name": "foo", "payload": [ "Absent" ] } ] ]
}

### Bare command with single dquoted positional:
Parser.expression "test \"foo\""
{ "count": 1, "cmd": "test", "args": [ [ "Positional", "foo" ] ] }

### Single dquoted command with single dquoted positional:
Parser.expression "\"test\" \"foo\""
{ "count": 1, "cmd": "test", "args": [ [ "Positional", "foo" ] ] }

### Single dquoted command, bare flag, and dquoted payload:
Parser.expression "\"test\" --foo \"bar\""
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "foo", "payload": [ "Unresolved" ] } ],
    [ "Positional", "bar" ]
  ]
}

### Single dquoted command, flag-esque positional, and positional:
Parser.expression "\"test\" \"--foo\" \"bar\""
{
  "count": 1,
  "cmd": "test",
  "args": [ [ "Positional", "--foo" ], [ "Positional", "bar" ] ]
}

### Bare command, bare-double-dash, and quoted positional:
Parser.expression "test -- \"foo bar\""
{
  "count": 1,
  "cmd": "test",
  "args": [ [ "Positional", "--" ], [ "Positional", "foo bar" ] ]
}

### Bare command, long-flag, flag's name quoted:
Parser.expression "test --\"foo\""
{
  "count": 1,
  "cmd": "test",
  "args": [ [ "Flag", { "name": "foo", "payload": [ "Absent" ] } ] ]
}

### Bare command, long-flag, with a space in the flag's name:
Parser.expression "test --\"foo bar\""
{
  "count": 1,
  "cmd": "test",
  "args": [ [ "Flag", { "name": "foo bar", "payload": [ "Absent" ] } ] ]
}

### Bare command, long-flag w/ space in name, possibly-parameterized:
Parser.expression "test --\"foo bar\" baz"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "foo bar", "payload": [ "Unresolved" ] } ],
    [ "Positional", "baz" ]
  ]
}

### Bare command, long-flag w/ space in name, explicitly-parameterized:
Parser.expression "test --\"foo bar\"=baz"
{
  "count": 1,
  "cmd": "test",
  "args": [
    [ "Flag", { "name": "foo bar", "payload": [ "Resolved", "baz" ] } ]
  ]
}

### Bare command, long-flag w/ space in name, explicit, quoted parameter:
Parser.expression "test --\"foo bar\"=\"baz widget\""
{
  "count": 1,
  "cmd": "test",
  "args": [
    [
      "Flag",
      { "name": "foo bar", "payload": [ "Resolved", "baz widget" ] }
    ]
  ]
}

### Expressions separated by semicolons:
Parser.script "test; 2test; 3test"
{
  "expressions": [
    { "count": 1, "cmd": "test", "args": [] },
    { "count": 2, "cmd": "test", "args": [] },
    { "count": 3, "cmd": "test", "args": [] }
  ]
}

### Expressions separated by semicolons, with a trailing semicolon:
Parser.script "test; 2test; 3test;"
{
  "expressions": [
    { "count": 1, "cmd": "test", "args": [] },
    { "count": 2, "cmd": "test", "args": [] },
    { "count": 3, "cmd": "test", "args": [] }
  ]
}

### Expressions, with arguments, separated by semicolons:
Parser.script "test --foo bar; 2test --foo=bar; 3test --foo bar"
{
  "expressions": [
    {
      "count": 1,
      "cmd": "test",
      "args": [
        [ "Flag", { "name": "foo", "payload": [ "Unresolved" ] } ],
        [ "Positional", "bar" ]
      ]
    },
    {
      "count": 2,
      "cmd": "test",
      "args": [
        [ "Flag", { "name": "foo", "payload": [ "Resolved", "bar" ] } ]
      ]
    },
    {
      "count": 3,
      "cmd": "test",
      "args": [
        [ "Flag", { "name": "foo", "payload": [ "Unresolved" ] } ],
        [ "Positional", "bar" ]
      ]
    }
  ]
}

### Expressions, with arguments, separated by semicolons, with a trailing semicolon:
Parser.script "test --foo bar; 2test --foo=bar; 3test --foo bar;"
{
  "expressions": [
    {
      "count": 1,
      "cmd": "test",
      "args": [
        [ "Flag", { "name": "foo", "payload": [ "Unresolved" ] } ],
        [ "Positional", "bar" ]
      ]
    },
    {
      "count": 2,
      "cmd": "test",
      "args": [
        [ "Flag", { "name": "foo", "payload": [ "Resolved", "bar" ] } ]
      ]
    },
    {
      "count": 3,
      "cmd": "test",
      "args": [
        [ "Flag", { "name": "foo", "payload": [ "Unresolved" ] } ],
        [ "Positional", "bar" ]
      ]
    }
  ]
}

### Newlines after expressions:
Parser.script "test;\n   2test;\n   3test"
{
  "expressions": [
    { "count": 1, "cmd": "test", "args": [] },
    { "count": 2, "cmd": "test", "args": [] },
    { "count": 3, "cmd": "test", "args": [] }
  ]
}

### Newlines after expressions, with a trailing newline:
Parser.script "test;\n   2test;\n   3test;\n   "
{
  "expressions": [
    { "count": 1, "cmd": "test", "args": [] },
    { "count": 2, "cmd": "test", "args": [] },
    { "count": 3, "cmd": "test", "args": [] }
  ]
}

### An acceptable expression, incrementally:
Incremental.expression "hello --where=world"
{
  "count": 1,
  "cmd": "hello",
  "args": [
    [ "Flag", { "name": "where", "payload": [ "Resolved", "world" ] } ]
  ]
}

### A failing expression, incrementally:
Incremental.expression "hello --where="
fail-continuation invoked! cool.


### Listing of acceptable tokens during a failure:
Incremental.expression "hello --where="
URL_START, QUOTE_OPEN, IDENTIFIER, BARE_DOUBLE_DASH


### Dumping of stack-debugging information from a checkpoint:
Incremental.expression "hello --where="
InputNeeded
Terminal
unit
EQUALS
EQUALS : (unit) Terminal
flag_long : (string) Nonterminal
command : (string) Nonterminal
option_COUNT_ : (string option) Nonterminal
list_COLON_ : (unit list) Nonterminal


### Ascertaining of current command from a checkpoint:
Incremental.expression "a_command_name --blah="
a_command_name
