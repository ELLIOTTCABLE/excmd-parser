// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Sys = require("bs-platform/lib/js/sys.js");
var Path = require("path");
var Js_exn = require("bs-platform/lib/js/js_exn.js");

var linesToAnnotate = /* array */[/* tuple */[
    "type token =",
    "\n[@@bs.deriving jsConverter] [@@deriving show { with_path = false }, to_yojson { optional = true }]"
  ]];

function print_usage(param) {
  console.log("\nUsage: `node annotateMenhirTypes.bs.js <source>.ml <dest>.ml`\n");
  return /* () */0;
}

function resolve(param) {
  return Path.resolve("", param);
}

var args = Sys.argv.slice(2, 5);

var match = args.map(resolve);

var match$1;

if (match.length !== 2) {
  console.log("\nUsage: `node annotateMenhirTypes.bs.js <source>.ml <dest>.ml`\n");
  match$1 = Js_exn.raiseError("need exactly two arguments: a source, and a destination");
} else {
  var src = match[0];
  var dest = match[1];
  match$1 = /* tuple */[
    src,
    dest
  ];
}

var dest$1 = match$1[1];

var src$1 = match$1[0];

function prependAfterFirstOccurence(input, matchAfter, prependBeforeFollowing, addition) {
  var startIndex = input.indexOf(matchAfter, undefined, undefined);
  console.log(String(startIndex));
  if (startIndex === -1) {
    Js_exn.raiseError("".concat("'", matchAfter, "' not found in input file"));
  }
  var followingIndex = input.indexOf(prependBeforeFollowing, startIndex, undefined);
  console.log(String(followingIndex));
  if (followingIndex === -1) {
    Js_exn.raiseError("".concat("'", prependBeforeFollowing, "' not found following '", matchAfter, "' in input file"));
  }
  console.log("".concat("Adding annotation ))))e ", String(followingIndex), "( to '", matchAfter, "' (byte ", String(startIndex), ")"));
  var before = input.slice(undefined, followingIndex);
  var after = input.slice(followingIndex, undefined);
  var length = input.length + addition.length | 0;
  return Buffer.concat(/* array */[
              before,
              Buffer.from(addition),
              after
            ], length);
}

var contents = Fs.readFileSync(src$1);

function pafo(input, param) {
  return prependAfterFirstOccurence(input, param[0], "\n\n", param[1]);
}

var result = linesToAnnotate.reduce(pafo, contents);

Fs.writeFileSync(dest$1, result);

exports.linesToAnnotate = linesToAnnotate;
exports.print_usage = print_usage;
exports.src = src$1;
exports.dest = dest$1;
exports.prependAfterFirstOccurence = prependAfterFirstOccurence;
/* args Not a pure module */
